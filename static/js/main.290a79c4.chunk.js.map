{"version":3,"sources":["components/inputField/InputField.jsx","fields/fields.js","components/contactForm/ContactForm.jsx","components/contactList/contactItem/ContactItem.jsx","components/contactList/ContactList.jsx","components/filter/Filter.jsx","App.js","index.js"],"names":["InputField","props","data","className","label","htmlFor","id","list","name","type","pattern","title","required","ContactForm","onSubmit","useState","setName","number","setNumber","e","preventDefault","generate","value","onChange","target","ContactItem","onDelete","contactsList","map","onClick","ContactList","Filter","filter","App","contacts","state","setState","useEffect","contactsString","window","localStorage","getItem","contactsParse","JSON","parse","prevState","setItem","stringify","newContact","findDoubleContact","find","contact","alert","newContactsList","item","toLowerCase","includes","handleFilter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.290a79c4.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst InputField = (props) => {\r\n    const data = { ...props};\r\n    return (\r\n        <div className=\"mb-3\">\r\n            {data.label && <label htmlFor={data.id} className=\"form-label\">{data.label }</label>}\r\n            <input {...data}  />\r\n        </div>        \r\n    )\r\n};\r\n\r\nexport default InputField;\r\n\r\nInputField.propTypes = {\r\n    props: PropTypes.object,\r\n  }","export const list = {\r\n    name: {\r\n      name: \"name\",\r\n      type: \"text\",\r\n      className:\"form-control\",\r\n      id:\"inputName\",\r\n      // ariaDescribedby:\"nameHelp\",\r\n      pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n      title: \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n      required: true,\r\n      label: \"Name\",\r\n    },\r\n    number: {\r\n      name: \"number\",\r\n      type: \"tel\",\r\n      className:\"form-control\",\r\n      id: \"inputTelephone\",\r\n      pattern: \"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\",\r\n      title:\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\",\r\n      required: true,\r\n      label: \"Number\"\r\n    },\r\n  };","import { useState } from \"react\";\r\nimport { generate } from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputField from \"../inputField/InputField\";\r\nimport { list } from \"../../fields/fields\";\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  const handleChangeName = ({ target }) => {\r\n       setName(target.value)\r\n  };\r\n\r\n  const handleChangeNumber = ({ target }) => {\r\n      setNumber(target.value)\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const id = generate();\r\n    const newContact = { id, name, number };\r\n    onSubmit(newContact);\r\n    setName('')\r\n    setNumber('')\r\n\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"form-control mb-3\">\r\n        <InputField {...list.name} value={name} onChange={handleChangeName} />\r\n        <InputField {...list.number} value={number} onChange={handleChangeNumber} />\r\n        <div className=\"col-12\">\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types'\r\n\r\nconst ContactItem = ({ data = [], onDelete }) => {\r\n  const contactsList = data.map(({ name, id, number }) => (\r\n        <li\r\n          key={id}\r\n          className=\"list-group-item d-flex justify-content-between align-items-start \"\r\n        >\r\n          {name}: {number}\r\n          <button\r\n            onClick={() => onDelete(id)}\r\n            type=\"submit\"\r\n            className=\"btn btn-primary align-items-end btn-sm\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n  ));\r\n  return <>{contactsList}</>;\r\n};\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    })\r\n  ),\r\n  onDelete: PropTypes.func.isRequired,\r\n}\r\n","import ContactItem from \"./contactItem/ContactItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactList = ({ data, onDelete }) => {\r\n  return (\r\n    <>\r\n      <h1>Contacts</h1>\r\n      <ul className=\"list-group d-grid gap-2 d-md-flex justify-content-center\">\r\n        <ContactItem data={data} onDelete={onDelete} />\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Filter = ({ onChange, filter }) => {\r\n  return (\r\n    <>\r\n      <h2>Find contacts by name:</h2>\r\n      <div className=\"form-control col-md-6\">\r\n        <input\r\n          className=\"form-control col-md-3\"\r\n          onChange={onChange}\r\n          name=\"filter\"\r\n          value={filter}\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n}","import { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\n\nconst App = () => {\n  const [state, setState] = useState({\n    contacts: [],\n    filter: \"\",\n})\n\nuseEffect(() => {\n  const contactsString = window.localStorage.getItem(\"contacts\");\n  const contactsParse = JSON.parse(contactsString);\n  if (contactsParse) {\n    setState(prevState=>({ ...prevState, contacts: contactsParse }));\n  }\n}, [])\n\nuseEffect(() => {\n  window.localStorage.setItem(\"contacts\", JSON.stringify(state.contacts));\n}, [state.contacts])\n\nconst handleFilter = () => {\n  const { filter, contacts } = state;\n  const filteredContacts = contacts.filter((item) =>\n    item.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return filteredContacts;\n};\n\nconst handleChange = ({ target }) => {\n  const { value, name } = target;\n  setState(prevState=> ({ ...prevState, [name]: value }));\n};\n\nconst   handleSubmit = (newContact) => {\n  const findDoubleContact = state.contacts.find(\n    (contact) => contact.name === newContact.name\n  );\n  if (findDoubleContact) {\n    alert(`${findDoubleContact.name} is already in contacts`);\n    return;\n  } else {\n    setState((prevState) => {\n  \n      const newContactsList = [...prevState.contacts, newContact];\n      return {\n        ...prevState,\n        contacts: newContactsList,\n      };\n    });\n\n  }\n};\n\nconst handleDelete = (id) => {\n  setState((prevState) => {\n    const copyContactsList = [...state.contacts];\n    const newContactsList = copyContactsList.filter(\n      (contact) => contact.id !== id\n    );\n    return {\n      ...prevState,\n      contacts: newContactsList,\n    };\n  });\n};\n\nconst { contacts, filter } = state;\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-header\">Phonebook</h1>\n      <ContactForm onSubmit={handleSubmit} />\n      <Filter onChange={handleChange} data={contacts} filter={filter} />\n      <ContactList data={handleFilter()} onDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}