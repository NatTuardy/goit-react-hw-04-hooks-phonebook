{"version":3,"sources":["components/inputField/InputField.jsx","fields/fields.js","components/contactForm/ContactForm.jsx","components/contactList/contactItem/ContactItem.jsx","components/contactList/ContactList.jsx","components/filter/Filter.jsx","App.js","index.js"],"names":["InputField","props","data","className","label","htmlFor","id","list","name","type","pattern","title","required","ContactForm","onSubmit","useState","number","state","setState","handleChange","target","value","prevState","e","preventDefault","generate","onChange","ContactItem","onDelete","contactsList","map","onClick","ContactList","Filter","filter","App","blockFirstRender","useRef","contacts","useEffect","contactsString","window","localStorage","getItem","contactsParse","JSON","parse","current","setItem","stringify","newContact","findDoubleContact","find","contact","newContactsList","alert","item","toLowerCase","includes","handleFilter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4dfab9f0.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst InputField = (props) => {\r\n    const data = { ...props};\r\n    return (\r\n        <div className=\"mb-3\">\r\n            {data.label && <label htmlFor={data.id} className=\"form-label\">{data.label }</label>}\r\n            <input {...data}  />\r\n        </div>        \r\n    )\r\n};\r\n\r\nexport default InputField;\r\n\r\nInputField.propTypes = {\r\n    props: PropTypes.object,\r\n  }","export const list = {\r\n    name: {\r\n      name: \"name\",\r\n      type: \"text\",\r\n      className:\"form-control\",\r\n      id:\"inputName\",\r\n      // ariaDescribedby:\"nameHelp\",\r\n      pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n      title: \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n      required: true,\r\n      label: \"Name\",\r\n    },\r\n    number: {\r\n      name: \"number\",\r\n      type: \"tel\",\r\n      className:\"form-control\",\r\n      id: \"inputTelephone\",\r\n      pattern: \"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\",\r\n      title:\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\",\r\n      required: true,\r\n      label: \"Number\"\r\n    },\r\n  };","import { useState } from \"react\";\r\nimport { generate } from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputField from \"../inputField/InputField\";\r\nimport { list } from \"../../fields/fields\";\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n  const [state, setState] = useState({\r\n    name: \"\",\r\n    number: \"\",\r\n  });\r\n\r\n  const handleChange = ({ target }) => {\r\n    const { value, name } = target;\r\n    setState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const id = generate();\r\n    const { name, number } = state;\r\n    const newContact = { id, name, number };\r\n    onSubmit(newContact);\r\n    setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n  const { name, number } = state;\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"form-control mb-3\">\r\n        <InputField {...list.name} value={name} onChange={handleChange} />\r\n        <InputField {...list.number} value={number} onChange={handleChange} />\r\n        <div className=\"col-12\">\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types'\r\n\r\nconst ContactItem = ({ data = [], onDelete }) => {\r\n  const contactsList = data.map(({ name, id, number }) => (\r\n        <li\r\n          key={id}\r\n          className=\"list-group-item d-flex justify-content-between align-items-start \"\r\n        >\r\n          {name}: {number}\r\n          <button\r\n            onClick={() => onDelete(id)}\r\n            type=\"submit\"\r\n            className=\"btn btn-primary align-items-end btn-sm\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n  ));\r\n  return <>{contactsList}</>;\r\n};\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    })\r\n  ),\r\n  onDelete: PropTypes.func.isRequired,\r\n}\r\n","import ContactItem from \"./contactItem/ContactItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactList = ({ data, onDelete }) => {\r\n  return (\r\n    <>\r\n      <h1>Contacts</h1>\r\n      <ul className=\"list-group d-grid gap-2 d-md-flex justify-content-center\">\r\n        <ContactItem data={data} onDelete={onDelete} />\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Filter = ({ onChange, filter }) => {\r\n  return (\r\n    <>\r\n      <h2>Find contacts by name:</h2>\r\n      <div className=\"form-control col-md-6\">\r\n        <input\r\n          className=\"form-control col-md-3\"\r\n          onChange={onChange}\r\n          name=\"filter\"\r\n          value={filter}\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n}","import { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\n\nconst App = () => {\n  const blockFirstRender = useRef(true)\n  const [state, setState] = useState({\n    contacts: [],\n    filter: \"\",\n})\n\nuseEffect(() => {\n  const contactsString = window.localStorage.getItem(\"contacts\");\n  const contactsParse = JSON.parse(contactsString);\n  if (contactsParse) {\n    setState(prevState=>({ ...prevState, contacts: contactsParse }));\n  }\n}, [])\n\nuseEffect(() => {\n  if(blockFirstRender){\n    blockFirstRender.current = false\n    return\n  }\n  window.localStorage.setItem(\"contacts\", JSON.stringify(state.contacts));\n}, [state.contacts])\n\nconst handleFilter = () => {\n  const { filter, contacts } = state;\n  const filteredContacts = contacts.filter((item) =>\n    item.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return filteredContacts;\n};\n\nconst handleChange = ({ target }) => {\n  const { value, name } = target;\n  setState(prevState=> ({ ...prevState, [name]: value }));\n};\n\nconst   handleSubmit = (newContact) => {\n  setState((prevState) => {\n    const findDoubleContact = state.contacts.find(\n      (contact) => contact.name === newContact.name\n    );\n    if (findDoubleContact) {\n      alert(`${findDoubleContact.name} is already in contacts`);\n      return;\n    }\n    const newContactsList = [...prevState.contacts, newContact];\n    return {\n      ...prevState,\n      contacts: newContactsList,\n    };\n  });\n};\n\nconst handleDelete = (id) => {\n  setState((prevState) => {\n    const copyContactsList = [...state.contacts];\n    const newContactsList = copyContactsList.filter(\n      (contact) => contact.id !== id\n    );\n    return {\n      ...prevState,\n      contacts: newContactsList,\n    };\n  });\n};\n\nconst { contacts, filter } = state;\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-header\">Phonebook</h1>\n      <ContactForm onSubmit={handleSubmit} />\n      <Filter onChange={handleChange} data={contacts} filter={filter} />\n      <ContactList data={handleFilter()} onDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}